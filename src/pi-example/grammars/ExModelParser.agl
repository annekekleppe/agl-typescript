// This file contains the grammar for the ProjectIt Example project
// which is input to the AGL parser.
// It is a transformed version of the grammar that is generated by ProjectIt.
// Any errors could be either in the generation, the transformation to AGL format, or ...

namespace test
grammar PiExample {
    skip WHITE_SPACE = "\s+" ;
    skip MULTI_LINE_COMMENT = "/\*[^*]*\*+(?:[^*/][^*]*\*+)*/" ;
    skip SINGLE_LINE_COMMENT = "//.*?$" ;

ExModel = 'model' variable '{'
	Entity*
	'model' 'wide' 'Methods:'
	Method*
	'}' ;

Entity = 'Entity' variable OptionalBase? '{'
    	Attribute*
    	Method*
    	'}' ;

OptionalBase = 'base' variable ;

Attribute = variable ':' variable;

Method = 'method' variable '(' [Parameter / ',']* '):' variable '{'
	ExExpression
	'}' ;

ExExpression = LiteralExpression 
    | AbsExpression 
    | ParameterRef 
    | LoopVariableRef 
    | SumExpression 
    | MethodCallExpression 
    | IfExpression 
    | BinaryExpression ;

LiteralExpression = StringLiteralExpression 
    | NumberLiteralExpression 
    | BooleanLiteralExpression ;

StringLiteralExpression = stringLiteral ;

NumberLiteralExpression = numberLiteral ;

BooleanLiteralExpression = booleanLiteral ;

AbsExpression = 'abs(' ExExpression ')' ;

ParameterRef = variable '.' AppliedFeature ;

AppliedFeature = variable ;

LoopVariableRef = variable ;

SumExpression = 'sum' 'from' variable '=' ExExpression 'to' ExExpression 'of' ExExpression;

MethodCallExpression = 'CALL' variable '(' [ExExpression / ',']* ')' ;

IfExpression = 'if' ExExpression 'then'
	ExExpression
	'else' 
	ExExpression
	'endif';

BinaryExpression = [ExExpression / Operator]+;

Operator = '*' | '+' | '|' | 'and' | 'or' | '<' | '>' | '==' ;
    
Parameter = variable  ':'  variable;

anyChar             = ".";
number              = "[0-9]";

leaf variable            = "[a-zA-Z_][a-zA-Z0-9_]*" ;
leaf stringLiteral       = '"' anyChar* '"';
leaf numberLiteral       = number+;
leaf booleanLiteral      = 'false' | 'true';

}
